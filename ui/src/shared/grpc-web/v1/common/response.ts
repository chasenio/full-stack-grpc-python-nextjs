// @generated by protobuf-ts 2.9.4 with parameter generate_dependencies,long_type_string
// @generated from protobuf file "v1/common/response.proto" (package "v1.common", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Violation } from "../../buf/validate/validate";
/**
 * @generated from protobuf message v1.common.ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 状态消息
     *
     * @generated from protobuf field: string message = 1;
     */
    message: string;
    /**
     * `violations` is a repeated field that contains all the `Violation` messages corresponding to the violations detected.
     *
     * @generated from protobuf field: repeated buf.validate.Violation violations = 2;
     */
    violations: Violation[];
    /**
     * 状态码
     *
     * @generated from protobuf field: v1.common.Code code = 3;
     */
    code: Code;
}
/**
 * 状态码
 *
 * @generated from protobuf enum v1.common.Code
 */
export enum Code {
    /**
     * 无效状态码
     *
     * @generated from protobuf enum value: CODE_INVALID = 0;
     */
    INVALID = 0,
    /**
     * 成功
     *
     * @generated from protobuf enum value: CODE_OK = 1;
     */
    OK = 1,
    /**
     * 未知错误
     *
     * @generated from protobuf enum value: CODE_ERROR = 20;
     */
    ERROR = 20
}
// @generated message type with reflection information, may provide speed optimized methods
class ErrorResponse$Type extends MessageType<ErrorResponse> {
    constructor() {
        super("v1.common.ErrorResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "violations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Violation },
            { no: 3, name: "code", kind: "enum", T: () => ["v1.common.Code", Code, "CODE_"] }
        ]);
    }
    create(value?: PartialMessage<ErrorResponse>): ErrorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        message.violations = [];
        message.code = 0;
        if (value !== undefined)
            reflectionMergePartial<ErrorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ErrorResponse): ErrorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                case /* repeated buf.validate.Violation violations */ 2:
                    message.violations.push(Violation.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* v1.common.Code code */ 3:
                    message.code = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ErrorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* repeated buf.validate.Violation violations = 2; */
        for (let i = 0; i < message.violations.length; i++)
            Violation.internalBinaryWrite(message.violations[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* v1.common.Code code = 3; */
        if (message.code !== 0)
            writer.tag(3, WireType.Varint).int32(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.common.ErrorResponse
 */
export const ErrorResponse = new ErrorResponse$Type();
